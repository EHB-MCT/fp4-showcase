import Head from "next/head";
import { useEffect, useState } from "react";
import Card from "../components/ProjectCard";
import clustersData from "../data/clusters.json";
import tagsData from "../data/tags.json";
import styles from "../styles/Home.module.css";
import BannerComponent from "../components/BannerComponent";
import TitleComponent from "../components/TitleComponent";
import FilterComponent from "../components/FilterComponent";
import { getAllProjects } from "../lib/projects";
import { Skeleton } from "@/components/ui/skeleton";
import { motion } from "framer-motion";
import TrendingSlider from "@/components/TrendingSlider";
import TrendingCard from "@/components/TrendingCard";

export default function Home() {
  const [projects, setProjects] = useState([]);
  const [trendingProjects, setTrendingProjects] = useState([]);
  const [showFinalWorkProjects, setShowFinalWorkProjects] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredProjects, setFilteredProjects] = useState([]);
  const [selectedTags, setSelectedTags] = useState([]);
  const [selectedClusters, setSelectedClusters] = useState([]);
  const [tags, setTags] = useState([...tagsData]);
  const [clusters, setClusters] = useState([...clustersData]);
  const [showClearButton, setShowClearButton] = useState(false);
  const [loading, setLoading] = useState(true);
  const [isMobile, setIsMobile] = useState(false);

  const handleSearch = (query) => {
    setSearchQuery(query);
    const filteredProjects = projects.filter((project) =>
      project.title.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredProjects(filteredProjects);
  };

  const handleClearFilter = () => {
    setSelectedTags([]);
    setSelectedClusters([]);
    setTags([...tagsData]);
    setClusters([...clustersData]);
    setShowClearButton(false);
  };

  const handleToggle = () => {
    setShowFinalWorkProjects(!showFinalWorkProjects);
  };

  const handleSelectedTagsChange = (tags) => {
    setSelectedTags(tags);
  };

  const handleSelectedClustersChange = (clusters) => {
    setSelectedClusters(clusters);
  };

  const staggerVariant = {
    visible: {
      opacity: 1,
      transition: {
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
    hidden: {
      opacity: 0,
    },
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const data = await getAllProjects();
        setProjects(data);

        // Extract the project IDs from the data
        const projectIds = data.map((project) => project.project_id);

        // Save the project IDs in local storage
        localStorage.setItem("projectIds", JSON.stringify(projectIds));

        let testData = [...data];

        // Sort the testData based on likeCount in descending order
        testData.sort((a, b) => b.likeCount - a.likeCount);

        // Get the top 5 items
        const topFive = testData.slice(0, 5);

        // Shuffle the topFive using the Fisher-Yates shuffle algorithm
        for (let i = topFive.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [topFive[i], topFive[j]] = [topFive[j], topFive[i]];
        }

        // Take the first 3 items from the shuffled topFive
        const topThree = topFive.slice(0, 3);

        // Set the shuffled topThree as the trending projects
        setTrendingProjects(topThree);

        setLoading(false);
      } catch (e) {
        console.error(e);
        setLoading(false);
      }
    };
    fetchData();

    // Check if the window width is less than or equal to 768px (adjust the value if needed)
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    // Listen for window resize events
    window.addEventListener("resize", handleResize);

    // Call handleResize initially
    handleResize();

    // Clean up the event listener
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <>
      <Head>
        <title>Final Show - Showcase</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://fonts.googleapis.com/icon?family=Material+Icons"
          rel="stylesheet"
        />
      </Head>
      <main>
        <div className={`${styles.homeTrendingContainer} containerWidth`}>
          <TitleComponent title="Trending" />

          {isMobile ? (
            trendingProjects.length > 0 && (
              <TrendingCard project={trendingProjects[0]} />
            )
          ) : (
            <TrendingSlider trendingProjects={trendingProjects} />
          )}
        </div>
        <BannerComponent
          mobileImage="/images/home-banner-mobile.jpg"
          desktopImage="/images/banner.png"
          title="Final Show"
        />
        <div className={`${styles.homeAllProjectsContainer} containerWidth`}>
          <TitleComponent title="All projects" />
          <FilterComponent
            showFinalWorkProjects={showFinalWorkProjects}
            setShowFinalWorkProjects={setShowFinalWorkProjects}
            onSearch={handleSearch}
            onSelectedTagsChange={handleSelectedTagsChange}
            onSelectedClustersChange={handleSelectedClustersChange}
            onClearFilter={handleClearFilter}
          />
        </div>
        <div
          className={`${styles.homeAllProjectsSubContainer} customGrid containerWidth mb-10`}
        >
          {(searchQuery ? filteredProjects : projects)
            .filter(
              (project) =>
                !showFinalWorkProjects ||
                project.projectBelongsTo === "finalwork"
            )
            .filter((project) =>
              selectedTags.every((tag) => project.tags.includes(tag))
            )
            .filter((project) =>
              selectedClusters.every((cluster) =>
                project.category.includes(cluster)
              )
            )
            .map((project) => (
              <Card key={project.id} project={project} />
            ))}
        </div>
      </main>
    </>
  );
}
