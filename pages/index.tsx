import Head from "next/head";
import { useEffect, useState } from "react";
import Card from "../components/ProjectCard";
import TrendingProjectsSlider from "../components/TrendingProjectsSlider";
import clustersData from "../data/clusters.json";
import tagsData from "../data/tags.json";
import styles from "../styles/Home.module.css";
import DottedLine from "../components/DottedLine";
import BannerComponent from "../components/BannerComponent";
import TitleComponent from "../components/TitleComponent";
import FilterComponent from "../components/FilterComponent";
import { getAllProjects } from "../lib/projects";

export default function Home() {
  const [projects, setProjects] = useState([]);
  const [trendingProjects, setTrendingProjects] = useState([]);
  const [showFinalWorkProjects, setShowFinalWorkProjects] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredProjects, setFilteredProjects] = useState([]);
  const [selectedTags, setSelectedTags] = useState([]);
  const [selectedClusters, setSelectedClusters] = useState([]);
  const [tags, setTags] = useState([...tagsData]);
  const [clusters, setClusters] = useState([...clustersData]);
  const [showClearButton, setShowClearButton] = useState(false);

  const handleSearch = (query) => {
    setSearchQuery(query);
    const filteredProjects = projects.filter((project) =>
      project.title.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredProjects(filteredProjects);
  };

  const handleClearFilter = () => {
    setSelectedTags([]);
    setSelectedClusters([]);
    setTags([...tagsData]);
    setClusters([...clustersData]);
    setShowClearButton(false);
  };

  const handleToggle = () => {
    setShowFinalWorkProjects(!showFinalWorkProjects);
  };

  const handleSelectedTagsChange = (tags) => {
    setSelectedTags(tags);
  };

  const handleSelectedClustersChange = (clusters) => {
    setSelectedClusters(clusters);
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getAllProjects();
        setProjects(data);

        let testData = [...data];
        testData = testData
          .sort((a, b) => b.likeCount - a.likeCount)
          .slice(0, 3);
        setTrendingProjects(testData);
      } catch (e) {
        console.error(e);
      }
    };
    fetchData();
  }, []);

  return (
    <>
      <Head>
        <title>Final Show - Showcase</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          href="https://fonts.googleapis.com/icon?family=Material+Icons"
          rel="stylesheet"
        />
      </Head>
      <main>
        <div className={`${styles.homeTrendingContainer} containerWidth`}>
          <TitleComponent title="Trending" />
          <div className="customGrid">
            {trendingProjects.map((project) => (
              <Card key={project.id} project={project} />
            ))}
          </div>
        </div>
        <BannerComponent image="/images/home-banner.jpg" title="Final Show" />
        <div className={`${styles.homeAllProjectsContainer} containerWidth`}>
          <TitleComponent title="All projects" />
          <FilterComponent
            showFinalWorkProjects={showFinalWorkProjects}
            setShowFinalWorkProjects={setShowFinalWorkProjects}
            onSearch={handleSearch}
            onSelectedTagsChange={handleSelectedTagsChange}
            onSelectedClustersChange={handleSelectedClustersChange}
            onClearFilter={handleClearFilter}
          />
        </div>
        <div
          className={`${styles.homeAllProjectsSubContainer} customGrid containerWidth`}
        >
          {(searchQuery ? filteredProjects : projects)
            .filter(
              (project) =>
                !showFinalWorkProjects ||
                project.projectBelongsTo === "finalwork"
            )
            .filter((project) =>
              selectedTags.every((tag) => project.tags.includes(tag))
            )
            .filter((project) =>
              selectedClusters.every((cluster) =>
                project.category.includes(cluster)
              )
            )
            .map((project) => (
              <Card key={project.id} project={project} />
            ))}
        </div>
      </main>
    </>
  );
}
